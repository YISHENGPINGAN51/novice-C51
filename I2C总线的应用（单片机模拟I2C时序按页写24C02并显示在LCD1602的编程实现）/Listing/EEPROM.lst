C51 COMPILER V9.54   EEPROM                                                                11/05/2022 11:43:27 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE EEPROM
OBJECT MODULE PLACED IN ..\Output\EEPROM.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE ..\Source\EEPROM.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(..\
                    -Listing\EEPROM.lst) TABS(2) OBJECT(..\Output\EEPROM.obj)

line level    source

   1          #include "EEPROM.h"
   2          
   3          /********************************************************************
   4          函数名：E2ReadByte
   5          功  能：读取器件地址为IC_Addr的器件的内部字节地址addr中的数据
   6          参  数：IC_Addr-从器件地址  addr-器件内部字节地址
   7          返回值：dat-读取的一字节数据
   8          ********************************************************************/
   9          unsigned char E2ReadByte(unsigned char IC_Addr, unsigned char addr)
  10          {
  11   1        unsigned char dat;
  12   1        I2CStart();//启动总线
  13   1        I2CWriteByte(IC_Addr << 1);//器件寻址，执行写操作 从机应答在函数内部实现
  14   1        I2CWriteByte(addr);//写内部字节地址，告诉器件要从哪个地方开始读数据
  15   1        I2CStart();//重启总线
  16   1        I2CWriteByte((IC_Addr << 1) | 0x01);//后续操作为读操作，从地址addr开始读数据
  17   1        dat = I2CReadByte();//从总线上读一个字节数据
  18   1        SendAck(1);//主机只读一个字节，发NACK 发1 如果还继续读就发ACK 发0
  19   1        I2CStop();
  20   1        return dat;
  21   1      }
  22          
  23          /********************************************************************
  24          函数名：E2WriteByte
  25          功  能：写入一字节数据到从机器件地址为IC_Addr的内部字节地址addr
  26          参  数：IC_Addr-从器件地址  addr-器件内部字节地址  dat-待写入数据
  27          返回值：无
  28          ********************************************************************/
  29          void E2WriteByte(unsigned char IC_Addr, unsigned char addr, unsigned char dat)
  30          {
  31   1        I2CStart();//启动总线
  32   1        I2CWriteByte(IC_Addr << 1);//器件寻址，执行写操作 从机应答在函数内部实现
  33   1        I2CWriteByte(addr);//写内部字节地址，告诉器件要从哪个地方开始读数据
  34   1        I2CWriteByte(dat);//写数据
  35   1        I2CStop();//发完Stop后，器件才会把数据进行擦写，搬运到非易失区，
  36   1                  //这段时间里面器件不再响应主机的操作
  37   1      }
  38          
  39          /********************************************************************
  40          函数名：E2Read
  41          功  能：从器件地址为IC_Addr的器件的内部字节地址addr开始读取len字节的数据，保存到buf
  42          参  数：IC_Addr-从器件地址  addr-器件内部字节地址
  43                  *buf-保存读取的数据缓冲  len-读取的字节个数 < 0xFF - addr
  44          返回值：无
  45          ********************************************************************/
  46          void E2Read(unsigned char IC_Addr, unsigned char addr, unsigned char *buf, unsigned char len)
  47          {
  48   1        do{
  49   2            I2CStart();//启动总线
  50   2            if (!(I2CWriteByte(IC_Addr << 1)))//器件寻址，执行写操作 从机应答在函数内部实现
  51   2            {
  52   3              break;
  53   3            }
  54   2            I2CStop();
C51 COMPILER V9.54   EEPROM                                                                11/05/2022 11:43:27 PAGE 2   

  55   2          }  while (1);
  56   1      //  I2CStart();//启动总线
  57   1      //  I2CWriteByte(IC_Addr << 1);//器件寻址，执行写操作 从机应答在函数内部实现
  58   1        I2CWriteByte(addr);//写内部字节地址，告诉器件要从哪个地方开始读数据
  59   1        I2CStart();//重启总线
  60   1        I2CWriteByte((IC_Addr << 1) | 0x01);//后续操作为读操作，从地址addr开始读数据
  61   1        while (len > 1)
  62   1        {
  63   2          *buf++ = I2CReadByte();//从总线上读一个字节数据
  64   2          SendAck(0);//主机读多个字节，发NACK 发1 如果还继续读就发ACK 发0
  65   2          len--;
  66   2        }
  67   1        *buf = I2CReadByte();//从总线上读一个字节数据
  68   1        SendAck(1);//主机只读一个字节，发NACK 发1 如果还继续读就发ACK 发0
  69   1        I2CStop();
  70   1      }
  71          
  72          /********************************************************************
  73          函数名：E2Write
  74          功  能：写len个字节到从机器件地址为IC_Addr的内部字节地址addr开始的一段字节地址中
  75          参  数：IC_Addr-从机器件地址  addr-器件内部字节地址
  76                  buf-待写入数据缓冲区  len-待写入数据的字节个数
  77          返回值：无
  78          ********************************************************************/
  79          void E2Write(unsigned char IC_Addr, unsigned char addr, unsigned char *buf, unsigned char len)
  80          {
  81   1        while (len > 0)
  82   1        {
  83   2          do{
  84   3              I2CStart();//启动总线
  85   3              if (!(I2CWriteByte(IC_Addr << 1)))//器件寻址，执行写操作 从机应答在函数内部实现
  86   3              {
  87   4                break;
  88   4              }
  89   3              I2CStop();
  90   3          }  while (1);//为了防止死循环，可以增加一个i变量做累加判断，如果超过一定的时间还没有响应，退出循环
  91   2          I2CWriteByte(addr++);//写内部字节地址，告诉器件要从哪个地方开始读数据
  92   2          I2CWriteByte(*buf++);//写数据
  93   2          I2CStop();//发完Stop后，器件才会把数据进行擦写，搬运到非易失区，
  94   2                    //这段时间里面器件不再响应主机的操作
  95   2      //    DelayXms(10);
  96   2          len--;
  97   2        }
  98   1      }
  99          
 100          /********************************************************************
 101          函数名：E2WritePage
 102          功  能：按页写（8字节一页）写len个字节到从机器件地址为IC_Addr的内部字节地址addr开始的一段字节地址中
 103          参  数：IC_Addr-从机器件地址  addr-器件内部字节地址
 104                  buf-待写入数据缓冲区  len-待写入数据的字节个数
 105          返回值：0-写入字节个数超过存储空间的字节数  1-正常写入
 106          ********************************************************************/
 107          unsigned char E2WritePage(unsigned char IC_Addr, unsigned char addr, unsigned char *buf, unsigned char len
             -)
 108          {
 109   1        if ((Max_addr - addr) < len)//如果待写入的字节数len大于剩余的存储空间字节数，则直接返回，不执行写入
 110   1          return 0;
 111   1        while (len > 0)//e.g. 10字节写入
 112   1        {
 113   2          do{
 114   3              I2CStart();//启动总线
 115   3              if (!(I2CWriteByte(IC_Addr << 1)))//器件寻址，执行写操作 从机应答在函数内部实现
C51 COMPILER V9.54   EEPROM                                                                11/05/2022 11:43:27 PAGE 3   

 116   3              {
 117   4                break;
 118   4              }
 119   3              I2CStop();
 120   3          }  while (1);//为了防止死循环，可以增加一个i变量做累加判断，如果超过一定的时间还没有响应，退出循环
 121   2          I2CWriteByte(addr);//写内部页起始字节地址，告诉器件要从哪个地方开始读数据
 122   2          while (len > 0)
 123   2          {
 124   3            I2CWriteByte(*buf++);//写数据
 125   3            addr++;//每写入一个字节，字节地址addr++
 126   3            len--;
 127   3            if ((addr & PageByte) == 0)
 128   3            {
 129   4              break;
 130   4            }
 131   3          }
 132   2          I2CStop();//发完Stop后，器件才会把数据进行擦写，搬运到非易失区，
 133   2                    //这段时间里面器件不再响应主机的操作
 134   2        }
 135   1        return 1;
 136   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    353    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      24
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
