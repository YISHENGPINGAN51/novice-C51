C51 COMPILER V9.54   MAIN                                                                  01/16/2022 21:19:50 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN ..\Output\main.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE ..\Source\main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(..\Li
                    -sting\main.lst) TABS(2) OBJECT(..\Output\main.obj)

line level    source

   1          //51单片机播放音乐库文件
   2          /**************************************************************************
   3             
   4                        SOUND PLAY FOR 51MCU
   5            
   6                            COPYRIGHT (c)   2005 BY JJJ.
   7                                    --  ALL RIGHTS RESERVED  --
   8            
   9             File Name:       SoundPlay.h
  10             Author:          Jiang Jian Jun
  11             Created:         2005/5/16
  12             Modified:    NO
  13             Revision:    1.0
  14            
  15          *******************************************************************************/
  16          
  17          /*说明**************************************************************************
  18           曲谱存贮格式 unsigned char code MusicName{音高，音长，音高，音长...., 0,0};  末尾:0,0 表示结束(Important)
  19          
  20           音高由三位数字组成：
  21              个位是表示 1~7 这七个音符 
  22              十位是表示音符所在的音区:1-低音，2-中音，3-高音;
  23              百位表示这个音符是否要升半音: 0-不升，1-升半音。
  24           
  25           音长最多由三位数字组成： 
  26              个位表示音符的时值，其对应关系是： 
  27                |数值(n):  |0 |1 |2 |3 | 4 | 5 | 6 
  28                |几分音符: |1 |2 |4 |8 |16 |32 |64    音符=2^n
  29              十位表示音符的演奏效果(0-2):  0-普通，1-连音，2-顿音
  30              百位是符点位: 0-无符点，1-有符点
  31          
  32           调用演奏子程序的格式
  33              Play(乐曲名,调号,升降八度,演奏速度);
  34            |乐曲名           : 要播放的乐曲指针,结尾以(0,0)结束;
  35            |调号(0-11)       : 是指乐曲升多少个半音演奏;
  36            |升降八度(1-3)    : 1:降八度, 2:不升不降, 3:升八度;
  37            |演奏速度(1-12000): 值越大速度越快;
  38          
  39          ***************************************************************************/
  40          #ifndef __SOUNDPLAY_H_REVISION_FIRST__
  41          #define __SOUNDPLAY_H_REVISION_FIRST__
  42          
  43          #include <REGX51.H>
  44          #include "delay.h"
  45          
  46          //**************************************************************************
  47          
  48          #define SYSTEM_OSC    11059200//12000000  //定义晶振频率12000000HZ
  49          #define SOUND_SPACE   4/5     //定义普通音符演奏的长度分率,//每4分音符间隔
  50          sbit    BeepIO    =     P3^7;   //定义输出管脚
  51          
  52          unsigned int  code FreTab[12]  = { 262,277,294,311,330,349,369,392,415,440,466,494 }; //原始频率表
  53          unsigned char code SignTab[7]  = { 0,2,4,5,7,9,11 };                  //1~7在频率表中的位置
  54          unsigned char code LengthTab[7]= { 1,2,4,8,16,32,64 };            
C51 COMPILER V9.54   MAIN                                                                  01/16/2022 21:19:50 PAGE 2   

  55          unsigned char Sound_Temp_TH0,Sound_Temp_TL0;  //音符定时器初值暂存 
  56          unsigned char Sound_Temp_TH1,Sound_Temp_TL1;  //音长定时器初值暂存
  57          //**************************************************************************
  58          void InitialSound(void)
  59          {
  60   1        BeepIO = 1;
  61   1        Sound_Temp_TH1 = (65535-(1/1200)*SYSTEM_OSC)/256; // 计算TL1应装入的初值  (10ms的初装值)
  62   1        Sound_Temp_TL1 = (65535-(1/1200)*SYSTEM_OSC)%256; // 计算TH1应装入的初值 
  63   1        TH1 = Sound_Temp_TH1;
  64   1        TL1 = Sound_Temp_TL1;
  65   1        TMOD  |= 0x11;
  66   1        ET0    = 1;
  67   1        ET1    = 0;
  68   1        TR0    = 0;
  69   1        TR1    = 0;
  70   1        EA     = 1;
  71   1      }
  72          
  73          void BeepTimer0(void) interrupt 1 //音符发生中断
  74          {
  75   1        BeepIO = !BeepIO;
  76   1        TH0    = Sound_Temp_TH0;
  77   1        TL0    = Sound_Temp_TL0;
  78   1      }
  79          //**************************************************************************
  80          void Play(unsigned char *Sound,unsigned char Signature,unsigned Octachord,unsigned int Speed)
  81          {
  82   1        unsigned int NewFreTab[12];   //新的频率表
  83   1        unsigned char i,j;
  84   1        unsigned int Point,LDiv,LDiv0,LDiv1,LDiv2,LDiv4,CurrentFre,Temp_T,SoundLength;
  85   1        unsigned char Tone,Length,SL,SH,SM,SLen,XG,FD;
  86   1        for(i=0;i<12;i++)         // 根据调号及升降八度来生成新的频率表 
  87   1        {
  88   2          j = i + Signature;
  89   2          if(j > 11)
  90   2          {
  91   3            j = j-12;
  92   3            NewFreTab[i] = FreTab[j]*2;
  93   3          }
  94   2          else
  95   2            NewFreTab[i] = FreTab[j];
  96   2      
  97   2          if(Octachord == 1)
  98   2            NewFreTab[i]>>=2;
  99   2          else if(Octachord == 3)
 100   2            NewFreTab[i]<<=2;
 101   2        }                 
 102   1        
 103   1        SoundLength = 0;
 104   1        while(Sound[SoundLength] != 0x00) //计算歌曲长度
 105   1        {
 106   2          SoundLength+=2;
 107   2        }
 108   1      
 109   1        Point = 0;
 110   1        Tone   = Sound[Point];  
 111   1        Length = Sound[Point+1];      // 读出第一个音符和它时时值
 112   1        
 113   1        LDiv0 = 12000/Speed;        // 算出1分音符的长度(几个10ms)  
 114   1        LDiv4 = LDiv0/4;          // 算出4分音符的长度 
 115   1        LDiv4 = LDiv4-LDiv4*SOUND_SPACE;  // 普通音最长间隔标准 
 116   1        TR0   = 0;
C51 COMPILER V9.54   MAIN                                                                  01/16/2022 21:19:50 PAGE 3   

 117   1        TR1   = 1;
 118   1        while(Point < SoundLength)
 119   1        {
 120   2          if(!INT1)
 121   2          {
 122   3            break;
 123   3          }
 124   2          SL=Tone%10;                 //计算出音符 
 125   2          SM=Tone/10%10;                //计算出高低音 
 126   2          SH=Tone/100;                //计算出是否升半 
 127   2          CurrentFre = NewFreTab[SignTab[SL-1]+SH];   //查出对应音符的频率  
 128   2          if(SL!=0)
 129   2          {
 130   3            if (SM==1) CurrentFre >>= 2;    //低音 
 131   3            if (SM==3) CurrentFre <<= 2;    //高音
 132   3            Temp_T = 65536-(50000/CurrentFre)*10/(12000000/SYSTEM_OSC);//计算计数器初值
 133   3            Sound_Temp_TH0 = Temp_T/256; 
 134   3            Sound_Temp_TL0 = Temp_T%256; 
 135   3            TH0 = Sound_Temp_TH0;  
 136   3            TL0 = Sound_Temp_TL0 + 12; //加12是对中断延时的补偿 
 137   3          }
 138   2          SLen=LengthTab[Length%10];  //算出是几分音符
 139   2          XG=Length/10%10;      //算出音符类型(0普通1连音2顿音) 
 140   2          FD=Length/100;
 141   2          LDiv=LDiv0/SLen;      //算出连音音符演奏的长度(多少个10ms)
 142   2          if (FD==1) 
 143   2            LDiv=LDiv+LDiv/2;
 144   2          if(XG!=1) 
 145   2            if(XG==0)         //算出普通音符的演奏长度 
 146   2              if (SLen<=4)  
 147   2                LDiv1=LDiv-LDiv4;
 148   2              else
 149   2                LDiv1=LDiv*SOUND_SPACE;
 150   2            else
 151   2              LDiv1=LDiv/2;     //算出顿音的演奏长度 
 152   2          else
 153   2            LDiv1=LDiv;
 154   2          if(SL==0) LDiv1=0;
 155   2            LDiv2=LDiv-LDiv1;     //算出不发音的长度 
 156   2            if (SL!=0)
 157   2          {
 158   3            TR0=1;
 159   3            for(i=LDiv1;i>0;i--)  //发规定长度的音 
 160   3            {
 161   4              while(TF1==0);
 162   4              TH1 = Sound_Temp_TH1;
 163   4              TL1 = Sound_Temp_TL1;
 164   4              TF1=0;
 165   4            }
 166   3          }
 167   2          if(LDiv2!=0)
 168   2          {
 169   3            TR0=0; BeepIO=1;
 170   3            for(i=LDiv2;i>0;i--)  //音符间的间隔
 171   3            {
 172   4              while(TF1==0);
 173   4              TH1 = Sound_Temp_TH1;
 174   4              TL1 = Sound_Temp_TL1;
 175   4              TF1=0;
 176   4            }
 177   3          }
 178   2          Point+=2; 
C51 COMPILER V9.54   MAIN                                                                  01/16/2022 21:19:50 PAGE 4   

 179   2          Tone=Sound[Point];
 180   2          Length=Sound[Point+1];
 181   2        }
 182   1        BeepIO = 1;
 183   1      }
 184          //**************************************************************************
 185          #endif
 186          
 187          //附:3首曲谱编码表
 188          
 189          //挥着翅膀的女孩
 190          unsigned char code Music_Girl[]={ 0x17,0x02, 0x17,0x03, 0x18,0x03, 0x19,0x02, 0x15,0x03,
 191                                            0x16,0x03, 0x17,0x03, 0x17,0x03, 0x17,0x03, 0x18,0x03,
 192                                            0x19,0x02, 0x16,0x03, 0x17,0x03, 0x18,0x02, 0x18,0x03,
 193                                            0x17,0x03, 0x15,0x02, 0x18,0x03, 0x17,0x03, 0x18,0x02,
 194                                            0x10,0x03, 0x15,0x03, 0x16,0x02, 0x15,0x03, 0x16,0x03,
 195                                            0x17,0x02, 0x17,0x03, 0x18,0x03, 0x19,0x02, 0x1A,0x03,
 196                                            0x1B,0x03, 0x1F,0x03, 0x1F,0x03, 0x17,0x03, 0x18,0x03,
 197                                            0x19,0x02, 0x16,0x03, 0x17,0x03, 0x18,0x03, 0x17,0x03,
 198                                            0x18,0x03, 0x1F,0x03, 0x1F,0x02, 0x16,0x03, 0x17,0x03,
 199                                            0x18,0x03, 0x17,0x03, 0x18,0x03, 0x20,0x03, 0x20,0x02,
 200                                            0x1F,0x03, 0x1B,0x03, 0x1F,0x66, 0x20,0x03, 0x21,0x03,
 201                                            0x20,0x03, 0x1F,0x03, 0x1B,0x03, 0x1F,0x66, 0x1F,0x03,
 202                                            0x1B,0x03, 0x19,0x03, 0x19,0x03, 0x15,0x03, 0x1A,0x66,
 203                                            0x1A,0x03, 0x19,0x03, 0x15,0x03, 0x15,0x03, 0x17,0x03,
 204                                            0x16,0x66, 0x17,0x04, 0x18,0x04, 0x18,0x03, 0x19,0x03,
 205                                            0x1F,0x03, 0x1B,0x03, 0x1F,0x66, 0x20,0x03, 0x21,0x03,
 206                                            0x20,0x03, 0x1F,0x03, 0x1B,0x03, 0x1F,0x66, 0x1F,0x03,
 207                                            0x1B,0x03, 0x19,0x03, 0x19,0x03, 0x15,0x03, 0x1A,0x66,
 208                                            0x1A,0x03, 0x19,0x03, 0x19,0x03, 0x1F,0x03, 0x1B,0x03,
 209                                            0x1F,0x00, 0x1A,0x03, 0x1A,0x03, 0x1A,0x03, 0x1B,0x03,
 210                                            0x1B,0x03, 0x1A,0x03, 0x19,0x03, 0x19,0x02, 0x17,0x03,
 211                                            0x15,0x17, 0x15,0x03, 0x16,0x03, 0x17,0x03, 0x18,0x03,
 212                                            0x17,0x04, 0x18,0x0E, 0x18,0x03, 0x17,0x04, 0x18,0x0E,
 213                                            0x18,0x66, 0x17,0x03, 0x18,0x03, 0x17,0x03, 0x18,0x03,
 214                                            0x20,0x03, 0x20,0x02, 0x1F,0x03, 0x1B,0x03, 0x1F,0x66,
 215                                            0x20,0x03, 0x21,0x03, 0x20,0x03, 0x1F,0x03, 0x1B,0x03,
 216                                            0x1F,0x66, 0x1F,0x04, 0x1B,0x0E, 0x1B,0x03, 0x19,0x03,
 217                                            0x19,0x03, 0x15,0x03, 0x1A,0x66, 0x1A,0x03, 0x19,0x03,
 218                                            0x15,0x03, 0x15,0x03, 0x17,0x03, 0x16,0x66, 0x17,0x04,
 219                                            0x18,0x04, 0x18,0x03, 0x19,0x03, 0x1F,0x03, 0x1B,0x03,
 220                                            0x1F,0x66, 0x20,0x03, 0x21,0x03, 0x20,0x03, 0x1F,0x03,
 221                                            0x1B,0x03, 0x1F,0x66, 0x1F,0x03, 0x1B,0x03, 0x19,0x03,
 222                                            0x19,0x03, 0x15,0x03, 0x1A,0x66, 0x1A,0x03, 0x19,0x03,
 223                                            0x19,0x03, 0x1F,0x03, 0x1B,0x03, 0x1F,0x00, 0x18,0x02,
 224                                            0x18,0x03, 0x1A,0x03, 0x19,0x0D, 0x15,0x03, 0x15,0x02,
 225                                            0x18,0x66, 0x16,0x02, 0x17,0x02, 0x15,0x00, 0x00,0x00};
 226          //同一首歌
 227          unsigned char code Music_Same[]={ 0x0F,0x01, 0x15,0x02, 0x16,0x02, 0x17,0x66, 0x18,0x03,
 228                                            0x17,0x02, 0x15,0x02, 0x16,0x01, 0x15,0x02, 0x10,0x02,
 229                                            0x15,0x00, 0x0F,0x01, 0x15,0x02, 0x16,0x02, 0x17,0x02,
 230                                            0x17,0x03, 0x18,0x03, 0x19,0x02, 0x15,0x02, 0x18,0x66,
 231                                            0x17,0x03, 0x19,0x02, 0x16,0x03, 0x17,0x03, 0x16,0x00,
 232                                            0x17,0x01, 0x19,0x02, 0x1B,0x02, 0x1B,0x70, 0x1A,0x03,
 233                                            0x1A,0x01, 0x19,0x02, 0x19,0x03, 0x1A,0x03, 0x1B,0x02,
 234                                            0x1A,0x0D, 0x19,0x03, 0x17,0x00, 0x18,0x66, 0x18,0x03,
 235                                            0x19,0x02, 0x1A,0x02, 0x19,0x0C, 0x18,0x0D, 0x17,0x03,
 236                                            0x16,0x01, 0x11,0x02, 0x11,0x03, 0x10,0x03, 0x0F,0x0C,
 237                                            0x10,0x02, 0x15,0x00, 0x1F,0x01, 0x1A,0x01, 0x18,0x66,
 238                                            0x19,0x03, 0x1A,0x01, 0x1B,0x02, 0x1B,0x03, 0x1B,0x03,
 239                                            0x1B,0x0C, 0x1A,0x0D, 0x19,0x03, 0x17,0x00, 0x1F,0x01,
 240                                            0x1A,0x01, 0x18,0x66, 0x19,0x03, 0x1A,0x01, 0x10,0x02,
C51 COMPILER V9.54   MAIN                                                                  01/16/2022 21:19:50 PAGE 5   

 241                                            0x10,0x03, 0x10,0x03, 0x1A,0x0C, 0x18,0x0D, 0x17,0x03,
 242                                            0x16,0x00, 0x0F,0x01, 0x15,0x02, 0x16,0x02, 0x17,0x70,
 243                                            0x18,0x03, 0x17,0x02, 0x15,0x03, 0x15,0x03, 0x16,0x66,
 244                                            0x16,0x03, 0x16,0x02, 0x16,0x03, 0x15,0x03, 0x10,0x02,
 245                                            0x10,0x01, 0x11,0x01, 0x11,0x66, 0x10,0x03, 0x0F,0x0C,
 246                                            0x1A,0x02, 0x19,0x02, 0x16,0x03, 0x16,0x03, 0x18,0x66,
 247                                            0x18,0x03, 0x18,0x02, 0x17,0x03, 0x16,0x03, 0x19,0x00,
 248                                            0x00,0x00 };
 249          //两只蝴蝶                                  
 250          unsigned char code Music_Two[] ={ 0x17,0x03, 0x16,0x03, 0x17,0x01, 0x16,0x03, 0x17,0x03,
 251                                            0x16,0x03, 0x15,0x01, 0x10,0x03, 0x15,0x03, 0x16,0x02,
 252                                            0x16,0x0D, 0x17,0x03, 0x16,0x03, 0x15,0x03, 0x10,0x03,
 253                                            0x10,0x0E, 0x15,0x04, 0x0F,0x01, 0x17,0x03, 0x16,0x03,
 254                                            0x17,0x01, 0x16,0x03, 0x17,0x03, 0x16,0x03, 0x15,0x01,
 255                                            0x10,0x03, 0x15,0x03, 0x16,0x02, 0x16,0x0D, 0x17,0x03,
 256                                            0x16,0x03, 0x15,0x03, 0x10,0x03, 0x15,0x03, 0x16,0x01,
 257                                            0x17,0x03, 0x16,0x03, 0x17,0x01, 0x16,0x03, 0x17,0x03,
 258                                            0x16,0x03, 0x15,0x01, 0x10,0x03, 0x15,0x03, 0x16,0x02,
 259                                            0x16,0x0D, 0x17,0x03, 0x16,0x03, 0x15,0x03, 0x10,0x03,
 260                                            0x10,0x0E, 0x15,0x04, 0x0F,0x01, 0x17,0x03, 0x19,0x03,
 261                                            0x19,0x01, 0x19,0x03, 0x1A,0x03, 0x19,0x03, 0x17,0x01,
 262                                            0x16,0x03, 0x16,0x03, 0x16,0x02, 0x16,0x0D, 0x17,0x03,
 263                                            0x16,0x03, 0x15,0x03, 0x10,0x03, 0x10,0x0D, 0x15,0x00,
 264                                            0x19,0x03, 0x19,0x03, 0x1A,0x03, 0x1F,0x03, 0x1B,0x03,
 265                                            0x1B,0x03, 0x1A,0x03, 0x17,0x0D, 0x16,0x03, 0x16,0x03,
 266                                            0x16,0x0D, 0x17,0x01, 0x17,0x03, 0x17,0x03, 0x19,0x03,
 267                                            0x1A,0x02, 0x1A,0x02, 0x10,0x03, 0x17,0x0D, 0x16,0x03,
 268                                            0x16,0x01, 0x17,0x03, 0x19,0x03, 0x19,0x03, 0x17,0x03,
 269                                            0x19,0x02, 0x1F,0x02, 0x1B,0x03, 0x1A,0x03, 0x1A,0x0E,
 270                                            0x1B,0x04, 0x17,0x02, 0x1A,0x03, 0x1A,0x03, 0x1A,0x0E,
 271                                            0x1B,0x04, 0x1A,0x03, 0x19,0x03, 0x17,0x03, 0x16,0x03,
 272                                            0x17,0x0D, 0x16,0x03, 0x17,0x03, 0x19,0x01, 0x19,0x03,
 273                                            0x19,0x03, 0x1A,0x03, 0x1F,0x03, 0x1B,0x03, 0x1B,0x03,
 274                                            0x1A,0x03, 0x17,0x0D, 0x16,0x03, 0x16,0x03, 0x16,0x03,
 275                                            0x17,0x01, 0x17,0x03, 0x17,0x03, 0x19,0x03, 0x1A,0x02,
 276                                            0x1A,0x02, 0x10,0x03, 0x17,0x0D, 0x16,0x03, 0x16,0x01,
 277                                            0x17,0x03, 0x19,0x03, 0x19,0x03, 0x17,0x03, 0x19,0x03,
 278                                            0x1F,0x02, 0x1B,0x03, 0x1A,0x03, 0x1A,0x0E, 0x1B,0x04,
 279                                            0x17,0x02, 0x1A,0x03, 0x1A,0x03, 0x1A,0x0E, 0x1B,0x04,
 280                                            0x17,0x16, 0x1A,0x03, 0x1A,0x03, 0x1A,0x0E, 0x1B,0x04,
 281                                            0x1A,0x03, 0x19,0x03, 0x17,0x03, 0x16,0x03, 0x0F,0x02,
 282                                            0x10,0x03, 0x15,0x00, 0x00,0x00 };
 283          
 284          
 285          //两只老虎爱跳舞
 286          unsigned char code Music_TwoTigDance[]={ 0x15,0x02, 0x16,0x02, 0x17,0x02, 0x15,0x02, 0x16,0x02,
 287                                            0x19,0x02, 0x19,0x16, 0x17,0x02, 0x1A,0x03, 0x1A,0x03,
 288                                            0x1A,0x02, 0x1A,0x02, 0x19,0x0D, 0x17,0x03, 0x19,0x02,
 289                                            0x17,0x16, 0x15,0x66, 0x15,0x03, 0x15,0x02, 0x1A,0x03,
 290                                            0x1A,0x03, 0x19,0x02, 0x17,0x02, 0x19,0x16, 0x16,0x03,
 291                                            0x16,0x02, 0x17,0x03, 0x17,0x03, 0x16,0x03, 0x15,0x03,
 292                                            0x17,0x03, 0x16,0x01, 0x0F,0x03, 0x10,0x03, 0x11,0x03,
 293                                            0x16,0x03, 0x15,0x02, 0x16,0x02, 0x17,0x02, 0x15,0x02,
 294                                            0x16,0x02, 0x19,0x03, 0x19,0x03, 0x19,0x16, 0x17,0x02,
 295                                            0x1A,0x02, 0x1A,0x02, 0x1F,0x02, 0x1B,0x02, 0x1A,0x02,
 296                                            0x19,0x16, 0x15,0x66, 0x15,0x03, 0x15,0x02, 0x1A,0x02,
 297                                            0x19,0x02, 0x19,0x02, 0x17,0x16, 0x16,0x03, 0x16,0x02,
 298                                            0x17,0x03, 0x17,0x03, 0x16,0x03, 0x15,0x03, 0x16,0x03,
 299                                            0x15,0x01, 0x15,0x03, 0x16,0x03, 0x17,0x03, 0x19,0x03,
 300                                            0x1F,0x66, 0x1F,0x03, 0x1F,0x03, 0x19,0x03, 0x17,0x03,
 301                                            0x1F,0x03, 0x1B,0x15, 0x17,0x03, 0x1A,0x66, 0x1A,0x03,
 302                                            0x1A,0x03, 0x19,0x03, 0x1A,0x03, 0x1B,0x03, 0x19,0x15,
C51 COMPILER V9.54   MAIN                                                                  01/16/2022 21:19:50 PAGE 6   

 303                                            0x17,0x02, 0x19,0x03, 0x19,0x03, 0x19,0x02, 0x1F,0x02,
 304                                            0x20,0x66, 0x20,0x03, 0x1A,0x01, 0x19,0x03, 0x19,0x03,
 305                                            0x19,0x03, 0x1A,0x03, 0x1B,0x03, 0x1A,0x03, 0x1B,0x0D,
 306                                            0x1F,0x03, 0x20,0x14, 0x19,0x03, 0x1F,0x66, 0x1F,0x03,
 307                                            0x1F,0x03, 0x19,0x03, 0x17,0x03, 0x1F,0x03, 0x1B,0x15,
 308                                            0x17,0x03, 0x1A,0x66, 0x1A,0x03, 0x1A,0x03, 0x19,0x03,
 309                                            0x1A,0x03, 0x1B,0x03, 0x19,0x15, 0x17,0x02, 0x19,0x02,
 310                                            0x19,0x02, 0x1F,0x03, 0x1F,0x03, 0x20,0x03, 0x20,0x03,
 311                                            0x20,0x02, 0x1A,0x01, 0x19,0x03, 0x19,0x03, 0x19,0x03,
 312                                            0x1A,0x03, 0x1B,0x03, 0x1F,0x03, 0x1F,0x03, 0x20,0x03,
 313                                            0x1F,0x00, 0x00,0x00 };
 314          
 315          /******************************
 316          函数名：main
 317          功  能：主函数
 318          参  数：无
 319          返回值：无
 320          ******************************/
 321          void EX_Init();
 322          unsigned char state = 0;
 323          void main()
 324          {
 325   1        EX_Init();
 326   1        InitialSound(); 
 327   1        while(1)
 328   1        {
 329   2          switch (state)
 330   2          {
 331   3            case 0:Play(Music_TwoTigDance,0,3,350); break;
 332   3            case 1:Play(Music_Two,0,3,350); break;
 333   3            case 2:Play(Music_Same,0,3,350); break;
 334   3            case 3:Play(Music_Girl,0,3,350); break;
 335   3            default: break;
 336   3          }
 337   2        }
 338   1      }
 339          //外部中断初始化
 340          void EX_Init()
 341          {
 342   1        IT0 = 1;//下降沿触发模式  INT0
 343   1        IT1 = 1;//下降沿触发模式  INT1
 344   1        EX0 = 1;
 345   1        EX1 = 1;//打开中断开关
 346   1      }
 347          
 348          void EX0_ISR() interrupt 0
 349          {
 350   1        DelayXms(10);
 351   1        if (INT0 == 0)
 352   1        {
 353   2          TR0 = ~TR0;
 354   2          TR1 = ~TR1;
 355   2        }
 356   1      }
 357          
 358          void EX1_ISR() interrupt 2
 359          {
 360   1        DelayXms(10);
 361   1        if (INT1 == 0)
 362   1        {
 363   2          state++;
 364   2          if (state == 4)
C51 COMPILER V9.54   MAIN                                                                  01/16/2022 21:19:50 PAGE 7   

 365   2            state = 0;
 366   2        }
 367   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    971    ----
   CONSTANT SIZE    =   1210    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      5      51
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
