C51 COMPILER V9.54   MAIN                                                                  08/06/2022 16:08:28 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN ..\Output\main.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE ..\Source\main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(..\Li
                    -sting\main.lst) TABS(2) OBJECT(..\Output\main.obj)

line level    source

   1          /************************************************************************
   2          功能：带CRC校验的 自定义通讯协议
   3                01      01        01      03        CRC16
   4                地址    功能字      数据    校验字
   5                        01  第一路继电器      01  打开继电器
   6                        02  第二路继电器      02  关闭继电器
   7                                            只有这两个有效命令
   8          ************************************************************************/
   9          #include <reg51.h>
  10          #include "uart.h"
  11          #include "Relay.h"
  12          #include "CRC16.h"
  13          
  14          #define LOCAL_ADDRESS 0x01
  15          
  16          void Timer0Init(void);
  17          
  18          void main()
  19          {
  20   1        unsigned char i;
  21   1        unsigned int crc;
  22   1        unsigned char crch, crcl;
  23   1        Timer0Init();
  24   1        UartInit();
  25   1        Relay_Init();
  26   1        EA = 1;
  27   1        while (1)
  28   1        {
  29   2          if (recv_flag)
  30   2          {
  31   3            recv_flag = 0;
  32   3            start_timer = 0;//关定时器
  33   3            //校验本机地址，是本机的，则接收处理，否则退出
  34   3            if (recv_buf[0] != LOCAL_ADDRESS)
  35   3            {
  36   4              //return;
  37   4              continue;
  38   4            }
  39   3            //CRC16校验，校验正确，我们才处理，否则直接返回，并给出错误码
  40   3            crc = GetCRC16(recv_buf, recv_cnt - 2);
  41   3            crch = crc >> 8;
  42   3            crcl = crc & 0xFF;
  43   3            if ((recv_buf[recv_cnt - 2] != crch) || (recv_buf[recv_cnt - 1] != crcl))
  44   3            {
  45   4              recv_buf[1] = recv_buf[1] | 0x80;
  46   4              crc = GetCRC16(recv_buf, recv_cnt - 2);
  47   4              recv_buf[4] = crc & 0xFF;
  48   4              recv_buf[5] = crc >> 8;
  49   4              for (i = 0; i < recv_cnt; i++)
  50   4              {
  51   5                sendByte(recv_buf[i]);
  52   5              }
  53   4              return;
  54   4            }
C51 COMPILER V9.54   MAIN                                                                  08/06/2022 16:08:28 PAGE 2   

  55   3            switch (recv_buf[1])
  56   3            {
  57   4              case 1:
  58   4                if (recv_buf[2] == 0x01)
  59   4                  Relay0_ON();
  60   4                else if (recv_buf[2] == 0x02)
  61   4                  Relay0_OFF();
  62   4                break;
  63   4              case 2:
  64   4                if (recv_buf[2] == 0x01)
  65   4                  Relay1_ON();
  66   4                else if (recv_buf[2] == 0x02)
  67   4                  Relay1_OFF();
  68   4                break;
  69   4              case 3:
  70   4                if (recv_buf[2] == 0x01)
  71   4                  Relay2_ON();
  72   4                else if (recv_buf[2] == 0x02)
  73   4                  Relay2_OFF();
  74   4                break;
  75   4              case 4:
  76   4                if (recv_buf[2] == 0x01)
  77   4                  Relay3_ON();
  78   4                else if (recv_buf[2] == 0x02)
  79   4                  Relay3_OFF();
  80   4                break;
  81   4              case 5:
  82   4                if (recv_buf[2] == 0x01)
  83   4                  Relay4_ON();
  84   4                else if (recv_buf[2] == 0x02)
  85   4                  Relay4_OFF();
  86   4                break;
  87   4              default: break;
  88   4            }
  89   3            for (i = 0; i < recv_cnt; i++)
  90   3            {
  91   4              sendByte(recv_buf[i]);
  92   4            }
  93   3            clr_recvbuffer(recv_buf);//清除缓冲buffer
  94   3            recv_cnt = 0;
  95   3          }
  96   2        }
  97   1      }
  98          
  99          void Timer0Init(void)   //1毫秒@11.0592MHz
 100          {
 101   1      //  AUXR &= 0x7F;   //定时器时钟12T模式
 102   1        TMOD &= 0xF0;   //设置定时器模式
 103   1        TMOD |= 0x01;   //设置定时器模式
 104   1        TL0 = 0x66;   //设置定时初值
 105   1        TH0 = 0xFC;   //设置定时初值
 106   1        TF0 = 0;    //清除TF0标志
 107   1        ET0 = 1;
 108   1        TR0 = 1;    //定时器0开始计时
 109   1      }
 110          
 111          void timer0_ISR() interrupt 1
 112          {
 113   1        TR0 = 0;
 114   1        if (1 == start_timer)
 115   1        {
 116   2          recv_timer_cnt++;//1、累加定时时间计数器
C51 COMPILER V9.54   MAIN                                                                  08/06/2022 16:08:28 PAGE 3   

 117   2          if (recv_timer_cnt > MAX_REV_TIME)//2、判断定时时间是否超过了设定的最大的阈值，
 118   2                                            //超过则说明等待一段时间后没有新的数据到，
 119   2                                            //我们判断一包数据接收完毕
 120   2          {
 121   3            recv_timer_cnt = 0;//3、清除定时计数器  处理数据  清除buffer（放到数据处理之后）
 122   3            recv_flag = 1;
 123   3          }
 124   2        }
 125   1      
 126   1        TL0 = 0x66;   //设置定时初值
 127   1        TH0 = 0xFC;   //设置定时初值
 128   1        TR0 = 1;
 129   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    332    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
